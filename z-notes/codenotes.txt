#------Appointment Booking----------
class BookAppoinment(APIView):
    
    #TODO: validate if the patient id given is self or family member of a user....Date:16/02/2022-Aravind-unsolved
    #TODO: validate if the time and date is present in doctor schedule......Date:16/02/2022-Aravind-unsolved 

    authentication_classes=[UserAuthentication]
    permission_classes=[]
    """
        API to book appoinment
        Allowed methods:
            -POST
        
        Authentication: Required UserAuthentication

        POST:
            data:
                patient_id: [string,required] id of the patient
                date:       [string,required,format: mm/dd/yyyy] date of appoinment
                time:       [string,required,format: hh:mm:ss] time for the appoinment
                doctor_id:  [ string,required] id of the doctor

    """
    
    def post(self,request,format=None):
        
        data=self.request.data

        patiend_id=data.get("patient_id")
        date=data.get("date")
        time=data.get("time")
        doctor_id=data.get("doctor_id")

        validation_arr=["",None]
        
        """validate data"""
        if patiend_id in validation_arr or date in validation_arr or time in validation_arr or doctor_id in validation_arr:

            return Response({
                    "MSG":"FAILED",
                    "ERR":"Invalid data given",
                    "BODY":None
                            },status=status.HTTP_400_BAD_REQUEST)
        
        doctor_=Doctor.objects.filter(id=doctor_id) #get doctor instance

        if doctor_.exists():
            doctor_=doctor_[0]
        else:
            return Response({
                    "MSG":"FAILED",
                    "ERR":"Invalid doctor id given",
                    "BODY":None
                            },status=status.HTTP_400_BAD_REQUEST)

        patient_=Patient.objects.filter(id=patiend_id)  #get patient instance

        if patient_.exists():
            patient_=patient_[0]
        
        else:
            return Response({
                    "MSG":"FAILED",
                    "ERR":"Invalid patient id given",
                    "BODY":None
                            },status=status.HTTP_400_BAD_REQUEST)

        doctor_timings_=DoctorTimings.objects.filter(doctor_id=doctor_)   #get doctor timings instance

        if doctor_timings_.exists():
            doctor_timings_=doctor_timings_[0]
        else:
            return Response({
                    "MSG":"FAILED",
                    "ERR":"Invalid doctor id given",
                    "BODY":None
                            },status=status.HTTP_400_BAD_REQUEST)
        
        timeslots_json=doctor_timings_.timeslots

        #update doctor timeslot  by increasing the count
        try:
            timeslots_json=update_time_slots_json_for_appoinment(timeslots_json,date,time)
        except Exception as e:
            return display_response(
                msg="FAILED",
                err="Date or Time slot for the particular doctor is invalid",
                body=None,
                statuscode=status.HTTP_400_BAD_REQUEST
            )

        timeline_data = {
            "step1":{
                "title" : "Booking Confirmed",
                "time" :dtt.now().time().strftime("%H:%M:%S"),
                "completed" : True
                    },
            "step2":{
                "title" : "Arrived at Hospital",
                "time" : "",
                "completed" : False,
                    },
            "step3":{
                "title" : "Booking Confirmed",
                "time" :"",
                "completed" : False
                    },
            "cancel":{
                "title" : "Cancelled",
                "time" : "",
                "completed" : False
            }
        }
        time_line=timeline_data
        
        date_date=return_date_type(date)   #convert string date to date object
        time_time=return_time_type(time)    #convert string time to time object

        doctor_serialized_data=DoctorSerializer(doctor_).data
        patient_serialized_data=PatientSerializer(patient_).data
        patient_serialized_data['contact'] = request.user.mobile

        deptment = Department.objects.filter(id=doctor_serialized_data['department_id']['id']).first()
        if deptment is None:
            return display_response(
                msg="FAILED",
                err="Invalid department id given",
                body=None,
                statuscode=status.HTTP_400_BAD_REQUEST
            )

        """ Populate appoinment model """
        a=Appointment.objects.create(
                        date=date_date,
                        time=time_time,
                        doctor_id=doctor_id,
                        patient_id=patiend_id,
                        dept_id = deptment.id,
                        timeline=time_line,
                        counter = deptment.counter,
                        doctor=doctor_serialized_data,
                        patient=patient_serialized_data
                                )
        appoinment_serializer=AppointmentSerializer(a).data

        doctor_timings_.timeslots=timeslots_json               #update doctor timings
        doctor_timings_.save(update_fields=["timeslots"])

        """ Populate HelpDeskAppoinment model for a particular date"""
        help_desk_appoinment_instance=HelpDeskAppointment.objects.get_or_create(date=date_date,department=doctor_.department_id)[0]
        
        help_desk_appoinment_instance.count=help_desk_appoinment_instance.count+1  #increment the count of appoinment for th date
        
        arr=help_desk_appoinment_instance.bookings   #add appoinments to json
        arr.append(appoinment_serializer)
        help_desk_appoinment_instance.bookings=arr
        
        help_desk_appoinment_instance.save()     #save the helpdeskappoinment instance

        try:
            """ Add doctor notification """
            doc_msg = f"You have an appointment booked on {dtt.strptime(a.date,Ymd).strftime(dBY)},{dtt.strptime(a.time,HMS).strftime(IMp)}."
            DoctorNotification.objects.create(doctor_id=doctor_,message=doc_msg)
        except Exception as e:
            pass

        try:
            """ Add doctor notification """
            pat_msg = f"Your appointment booking on {dtt.strptime(a.date,Ymd).strftime(dBY)},{dtt.strptime(a.time,HMS).strftime(IMp)} with Dr. {a.doctor['name']} has been booked."
            PatientNotification.objects.create(patientid=patient_,message=pat_msg)
        except Exception as e:
            pass

        return Response({
                    "MSG":"SUCCESS",
                    "ERR":None,
                    "BODY":"Appoinment Booked successfully"
                            },status=status.HTTP_200_OK)


-------------------------------------------------------------------------------------------------
class DoctorSlotDetailsMain(APIView):
    authentication_classes=[UserAuthentication]
    permission_classes=[]

    def get(self,request,format=None):
        """
            User is the current registered user.
            Doctor Id is the 'id' field of the doctor model whose details are to be displayed.
            ---------------------
            GET method:
                doctorid : [String,required] Id of the doctor
        """

        json_data = {
            "doctor" : {},
            "familymembers" : [],
            "dates" : [],
            "morning" : {
                "isempty" : True,
                "slots" : [],
            },
            "afternoon" :  {
                "isempty" : True,
                "slots" : [],
            },
            "evening" :  {
                "isempty" : True,
                "slots" : [],
            },
        }
        
        user = request.user

        doctorid = request.query_params.get('doctorid', None)
        if doctorid is None:
            return display_response(
                msg = "FAILURE",
                err= "Doctorid is required",
                body = None,
                statuscode = status.HTTP_400_BAD_REQUEST
            )
        

        doctor = Doctor.objects.filter(id=doctorid).first()
        if doctor is None:
            return display_response(
                msg = "FAILURE",
                err= "Doctor was not found",
                body = None,
                statuscode = status.HTTP_400_BAD_REQUEST
            )

        """
            Adding the doctor details to te json_data['doctor'] field
        """
        doc_serialize = DoctorSerializer(doctor,context={"request":request})  
        json_data['doctor'] = {
            "id" : doc_serialize.data['id'],
            "doctor_id" : doc_serialize.data['doctor_id'],
            "name" : doc_serialize.data['name'],
            "experience" : doc_serialize.data['experience'],
            "gender" : doc_serialize.data['gender'],
            "qualification" : doc_serialize.data['qualification'],
            "specialisation" : doc_serialize.data['specialisation'],
            "defaultimg" : doc_serialize.data['name'][0:1]
        }

        """
            Get all the family members of the requesting user.
            Appending the current user data details also
        """
        members = []
        user_mem = {
            "id" : user.id,
            "name" : user.name,
            "selected" : user.selected,
        }
        members.append(user_mem)

        for i in user.family_members:
            mem = {
                "id" : i['id'],
                "name" : i['name'],
                "selected" : i['selected'],
            }
            members.append(mem)    

        json_data['familymembers'] = members
        
        timings = DoctorTimings.objects.filter(doctor_id=doctor).first() 
        dates_arr = []
        for j in timings.availability['dates_arr']:
            dt = dtt.strptime(j, "%m/%d/%Y").strftime(dmY)
            dates_arr.append(dt)
        json_data['dates'] = dates_arr
        """
            Get the slots for morning.
            "morning" : {
                "isempty" : True,
                "slots" : [],
            },
            Inside slots ,the format is 
            if(available == true) data = {
                "date" : "d-m-y",
                "count" : "count"
            }
        """

        mrngarr = timings.timeslots[timings.availability['dates_arr'][0]]['morning'] 
        morning_slots = mrngarr.keys()

        for x in morning_slots:
            if mrngarr[x]['available'] == True:
                data = {
                    "date" : dtt.strptime(x, HMS).strftime(IMp),
                    "count" : mrngarr[x]['count']
                }
                json_data['morning']['slots'].append(data)
        if len(json_data['morning']['slots']) > 0:
            json_data['morning']['isempty'] = False
        

        """
            Get the slots for afternoon.
            "afternoon" : {
                "isempty" : True,
                "slots" : [],
            },
            Inside slots ,the format is 
            if(available == true) data = {
                "date" : "d-m-y",
                "count" : "count"
            }
        """

        noonarr = timings.timeslots[timings.availability['dates_arr'][0]]['afternoon'] 
        noon_slots = noonarr.keys()
        
        for y in noon_slots:
            if noonarr[y]['available'] == True:
                data = {
                    "date" : dtt.strptime(y,HMS).strftime(IMp),
                    "count" : noonarr[y]['count']
                }
                json_data['afternoon']['slots'].append(data)
                
        if len(json_data['afternoon']['slots']) > 0:
            json_data['afternoon']['isempty'] = False
 
        """
            Get the slots for afternoon.
            "evening" : {
                "isempty" : True,
                "slots" : [],
            },
            Inside slots ,the format is 
            if(available == true) data = {
                "date" : "d-m-y",
                "count" : "count"
            }
        """       
        eveningarr = timings.timeslots[timings.availability['dates_arr'][0]]['evening'] 
        evening_slots = eveningarr.keys()
        for z in evening_slots:
            if eveningarr[z]['available'] == True:
                data = {
                    "date" : dtt.strptime(z,HMS).strftime(IMp),
                    "count" : eveningarr[z]['count']
                }
                json_data['evening']['slots'].append(data)
                
        if len(json_data['evening']['slots']) > 0:
            json_data['evening']['isempty'] = False


        return display_response(
            msg = "SUCCESS",
            err= None,
            body = json_data,
            statuscode = status.HTTP_200_OK
        )


---------------------------------------------------------------------------------
Timings update


def perform_time_slots_validation_check(time_slots_,update_time_slot_,new_keys_,old_keys_,key_str):

    for k in new_keys_:
        if k in old_keys_:
            if time_slots_[key_str][k]['count']==0:
                update_time_slot_[k]['available']=False
                update_time_slot_[k]['count']=0
            else:
                update_time_slot_[k]['available']=True
                update_time_slot_[k]['count']=time_slots_[key_str][k]['count']
        else:
            update_time_slot_[k]['available']=True
            update_time_slot_[k]['count']=0
    
    return time_slots_[key_str]
    
                """
                    Check if the date is less or equal to today's date:
                    If yes :
                        add the time greater to that
                        (perform_check)
                    else:
                        add the time available
                        (perform_check)
                    -----------------------------------
                    perform_check:
                        If new date ,then no validation required. If already present date,then need to check if the time_appointment_booking count is 
                        already booked,then update that slot
                """
                if dtt.strptime(str(i),"%m/%d/%Y").strftime(Ymd) == dtt.now(IST_TIMEZONE).strftime(Ymd):
                    """Then the updated date is current date"""
                    print("---date is current date----")
                else:
                    """The updated date is not current date . Now perform_check"""
                    
                    old_mrng_keys = time_slots[i]['morning'].keys()
                    old_aftn_keys = time_slots[i]['afternoon'].keys()
                    old_evng_keys = time_slots[i]['evening'].keys()

                    new_mrng_keys = morning_.keys()
                    new_aftn_keys = afternoon_.keys()
                    new_evng_keys = evening_.keys()

                    print(old_mrng_keys)
                    print(old_aftn_keys)
                    print(old_evng_keys)
                    print(new_mrng_keys)
                    print(new_aftn_keys)
                    print(new_evng_keys)

                    mrng_  = perform_time_slots_validation_check(
                        time_slots_ = time_slots[i],
                        update_time_slot_ = morning_,
                        new_keys_= new_mrng_keys,
                        old_keys_ = old_mrng_keys,
                        key_str = 'morning'
                        )

                    noon_  = perform_time_slots_validation_check(
                        time_slots_ = time_slots[i],
                        update_time_slot_ = afternoon_,
                        new_keys_= new_aftn_keys,
                        old_keys_ = old_aftn_keys,
                        key_str = 'afternoon'
                        )

                    even_  = perform_time_slots_validation_check(
                        time_slots_ = time_slots[i],
                        update_time_slot_ = evening_,
                        new_keys_= new_evng_keys,
                        old_keys_ = old_evng_keys,
                        key_str = 'evening'
                        )
                    print("-----------Before--------------------")
                    print(time_slots[i])
                    print("---update slots---")
                    print(mrng_)
                    # print(noon_)
                    # print(even_)
                    print("--------------------------------")

                    time_slots[i]["morning"]= mrng_
                    time_slots[i]["afternoon"]= noon_
                    time_slots[i]["evening"]= even_

                    slots_[i]=time_slots[i]